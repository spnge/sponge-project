/**  bake.bento
 *
 *   Project automation and dependency management in Bento
 *
 *
 **/

site bake [=

    /------------------------------------------/
    /-------------- version info  -------------/
    /------------------------------------------/

    public bake_version = "0.1"


    /------------------------------------------/
    /--------------   constants   -------------/
    /------------------------------------------/

    /** status values **/

    status [?]    
    status READY = "ready"
    status EXECUTING = "executing"
    status DONE = "done"
    status BLOCKED = "blocked"
    status SUCCEEDED = "succeeded"
    status FAILED = "failed" 


    /------------------------------------------/
    /-------------- session state -------------/
    /------------------------------------------/

    session_init [=
        left_panel_width(19);
        prompt(DEFAULT_PROMPT);
        console_print("bake version " + bake_version);
    =]

    /** completion status of targets, can be READY, EXECUTING or DONE. Stored by 
     *  target name.
     **/
    status{} completion_status = {}
    
    /** set the completion status of a target **/
    dynamic set_completion_status(target t, status s),(tname, status s) [=
        target_name = tname ? tname : t.name

        keep by target_name in completion_status:
        dynamic status save_status = s
        
        eval(save_status);
    =]
    
    /** set the completion status of all targets back to READY. **/
    dynamic clear_all_completion [=
        keep by tname in completion_status:
        status clear_completion = READY

        for tname in target_status.keys [=
            eval(clear_status);
        =]
    =]
    

    /** sussess status of targets, can be READY, EXECUTING, SUCCEEDED or 
     *  FAILED. Stored by target name.
     **/
    status{} success_status = {}
    
    /** set the success status of a target **/
    dynamic set_success_status(target t, status s),(tname, status s) [=
        target_name = tname ? tname : t.name
    
        keep by target_name in success_status:
        dynamic status save_status = s
        
        eval(save_status);
    =]  

    /------------------------------------------/
    /--------------    console    -------------/
    /------------------------------------------/

    /** the current console input prompt **/
    
    prompt(p) = p
    
    static DEFAULT_PROMPT = "$ "

    /** the current console buffer. When a target is executed, its output (both normal
     *  and error) is appended to this buffer.
     **/

    console_out(contents) = contents
    dynamic set_console_out(str) [= 
        eval(console_out(: str :));
        eval(console_changed(: true :));
        log(console_changed ? "> console changed" : "V console NOT changed");
    =]
    
    boolean console_changed(boolean changed) = changed
    
    public dynamic console_print(str) [=
        if (str) [=
            new_out = console_out + str
            set_console_out(new_out + '\r');
            log(">> " + str);
        =]
    =]
    
    public dynamic console_clear [=
        if (console_out) [=
            set_console_out("");
        =]
    =]

    public dynamic component console(request r) [=
        component_class = "console"
        
        dynamic display_contents [=
            log(console_changed ? "^ console has changed" : "^ console has not changed");
            eval(console_changed(: false :));
            [| <textarea wrap="off" id="console_textarea"> |]
            console_out;
            prompt;
            [| </textarea> |]
        =]

        with (r) [=
            for until console_changed [=
               sleep(console_server_sleep);
            =]
        =] else [=
            log("@ console called without request");
        =]
        
        display_contents;
    =]

    console_init_script [|
        // long poll
        pollComponent("bake_console", [= console_poll_length; =], function() {
               var console_textarea = document.getElementById("console_textarea");
               if (console_textarea !== undefined) {
                    console_textarea.scrollTop = console_textarea.scrollHeight;
                }
            });
    |]
    
    /------------------------------------------/
    /--------------      UI       -------------/
    /------------------------------------------/

    /---- site variables ----/

    int console_poll_length = 3333;
    int console_server_sleep = 100;
    
    float left_panel_width(float ems) = ems

    public color main_bgcolor = "#d5f1e5"

    dynamic class_for_status(status s) = "status_" + status
    

    /** base class of web page to display list of targets and instantiate selected targets. Bake
     *  projects should subclass this definition and add an implementation for top-level targets.
     **/

    public page bakepage [=
        boolean ajax_enabled = true
        title = sitename
        
        style [| 
            html, body { 
                width: 100%;
                height: 100%;
                margin: 0 0 0 0;
                background: [= main_bgcolor; =];
            }
            
            h2 {
                margin-left: 1em;
            }
            
            div {
                background: [= main_bgcolor; =];
            }
            
            #main_container {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }

            .console textarea {
                margin: 0;
                width: 100%;
                height: 100%;
                color: #55ff33;
                background: #232323;
                border: 0.125em solid #77ff77;
                font-family: "Courier New", Courier, monospace;
                font-weight: bold;
                font-size: 0.875em;
                min-height: 10em;
                resize: none;
            }

            .vertical_bar {
                height: 100%;
                width: 0.25em;
                background: #dddddd;  
                border-width: 0 0.125em 0 0.125em;
                border-style: outset;
                border-color: white;  
            }
            
            .dependency_panel {
                margin-left: 2em;
                width: 12em;
            }
            
            .dependency_state {
                width: 1.25em;
            }

            .target_panel {
                position: relative;
                width: 100%;
                margin: 0;
                padding:0.25em 0 0.25em 0;
                border: 0.0675em outset white;
            }
            
            .target_state {
                position: absolute;
                left: 0;
                top: 0;
                width: 1.5em;
            }

            .target_selector {
                margin: 0 2em 0 2em;
            }
            
            .target_exec {
                position: absolute;
                right: 0;
                top: 0;
                width: 1.5em;
            }

            .status_box {
                height: 0.5em;
                width: 0.5em;
                min-height: 0.5em;
                min-width: 0.5em;
                border-width: 0.125em;
                border-style: inset;
                border-color: white;  
                margin: 0.5em 0.25em 0.5em 0.25em;
                padding: 0;
            }
            
            .status_ready {
                background: [= main_bgcolor; =];
            }
            
            .status_done {
                background: black;
            }
            
            .status_blocked {
                background: #666666;
            }
            
            .status_executing {
                background: yellow;
            }
            
            .status_succeeded {
                background: green;
            }
            
            .status_failed {
                background: red;
            }

            #left_panel {
                position: absolute;
                padding: 0;
                left: 0;
                top: 0;
                width: [= left_panel_width; =]em;
            }
            
            #size_bar {
                cursor: pointer;
                position: absolute;
                left: [= left_panel_width; =]em;
                top: 0;
                bottom: 0;
                z-index: 1001;
            }

            #right_panel {
                background: #dddddd;
                margin: 0;
                position: absolute;
                left: [= (left_panel_width + 0.5); =]em;
                top: 0;
                right: 0.5em;
                bottom: 0.5em;
            }
            
            #bake_console {
                width: 100%;
                height: 100%;
            }
        |]
        
        onload_script [=
            console_init_script;
            size_bar_init_script;
        =]
            
        size_bar_init_script [|
            size_bar_init();            
        |] 
        
        target_param = "target"
    
        /** top-level targets (ones available to the user) **/
        target[] user_targets = []
        
        target[] all_targets = [ for target t in user_targets [= t, for target d in t.depends_on [= d =] =] ] 
    
        /** target look up map **/
        target{} target_by_name = { for target tgt in all_targets [= tgt.name: tgt =] }

        dynamic console(*) bake_console(request r) [=
            id = "bake_console"
        =]

        component size_bar [=
            id = "size_bar"
            component_class = "vertical_bar"
        =]
        
        dynamic component status_box(status s) [=
            component_class = "status_box status_" + s
            sub;
        =]

        dynamic component target_panel(target t) [=
            component_class = "target_panel"
            id = t.name + "_panel"

            target_selector(t);
            target_state(t);
            target_exec(t);
            if (t.depends_on) [=
                for target d in t.depends_on [=
                    dependency_panel(t, d);
                =]
            =]
        =]
        
        dynamic component dependency_panel(target indep, target dep) [=
            component_class = "dependency_panel"
            id = dep.name + "_on_" + indep.name + "_panel"

            dependency_label(dep);
            dependency_state(indep, dep);        
            dependency_exec(dep);
        =]
        
        public dynamic component target_state(target t),(params{}) [=
            component_class = "target_state"
            name = "target_state"
            target_name = params ? params{"target"} : t.name
            id = target_name + "_state" 

            if (!completion_status{target_name}) [=
                set_completion_status(target_name, READY);
            =]

            status_box(completion_status{target_name});
        =]
    
        dynamic component target_selector(target t) [=
            component_class = "target_selector"
            id = t.name + "_selector"
            target_name = t.name
            exec_id = t.name + "_exec" 
        
            request_button(target_name, target_name, exec_id, target_exec, target_param, target_name);
        =]

        public dynamic component target_exec(target t),(params{}) [=
            component_class = "target_exec"
            name = "target_exec"
            target_name = params ? params{target_param} : t.name
            id = target_name + "_exec"
            target this_target = target_by_name{target_name}
            
            execute_target(target t) [=
                exec_status = t.execute
            
                log("   ------ execute_target " + t.name);
                if (exec_status) [|
                    <span style="color: red;">Error executing [= target_name; =]: [= exec_status; =]</span>
                |]
            =]

            if (!target_name) [=
                redirect unspecified_target_error(here)
            =]
            
            if (params{target_param} && completion_status{target_name} == READY) [=

                log("  ^^^^^^ execute_target " + this_target.name);

                
                /--- execute in a separate thread ---/
                execute_target(this_target);++
                set_completion_status(this_target, EXECUTING);
                set_success_status(this_target, EXECUTING);
                
            =] else if (!success_status{target_name}) [=
                set_success_status(this_target, READY);
            =]
            status_box(success_status{target_name});
        =]

        dynamic component dependency_label(target dep) [=
            dep.name;
        =]

        dynamic component dependency_state(target indep, target dep) [=
        =]

        dynamic component dependency_exec(target dep) [=
        =]

        /------- top-level wrapper around everything -------/
        [| <div id="main_container"> |]
        
        [| <div id="left_panel" class="table_panel"> |]     
        
        [| <h2> |]
        title;
        [| </h2> |]

        for target t in all_targets [=
            target_panel(t);
        =]
        [| </div> |]
        
        size_bar;
        
        [| <div id="right_panel"> |]
        bake_console;
        [| </div> |]

        [| </div> |]

        [| <script> |]
        size_bar_script;
        util_script;
        [| </script> |]      
    =]


target ls [=
    task target_task = ls_cmd_task
=]

command_task ls_cmd_task [=
   command = "ls -l"
=]


    size_bar_script [|
        var main_container;
        var size_bar;
        var left_panel;
        var right_panel;
        var last_x;
        function size_bar_init() {
            main_container = document.getElementById("main_container");
            size_bar = document.getElementById("size_bar");
            left_panel = document.getElementById("left_panel");
            right_panel = document.getElementById("right_panel");
            size_bar.addEventListener("mousedown", size_bar_select, false);
            window.addEventListener("mouseup", size_bar_release, false);
        }
        function size_bar_release() {
            window.removeEventListener("mousemove", size_bar_drag, true);
            size_bar.style.cursor = "pointer";
            return false;
        }
        function size_bar_select(e) {
            window.addEventListener("mousemove", size_bar_drag, true);
            size_bar.style.cursor = "move";
            last_x = e.clientX;
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        function size_bar_drag(e) {
            var dx = e.clientX - last_x;
            last_x = e.clientX;
            var newLeft = (size_bar.offsetLeft + dx) + "px";
            var newRight = (size_bar.offsetLeft + size_bar.offsetWidth + dx) + "px";
            
            size_bar.style.left = newLeft;
            left_panel.style.width = newLeft;
            right_panel.style.left = newRight;
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    |]


    util_script [|
        function addClass(element, classToAdd) {
            var currentClassValue = element.className;
            if (currentClassValue.indexOf(classToAdd) == -1) {
                if ((currentClassValue == null) || (currentClassValue === "")) {
                    element.className = classToAdd;
                } else {
                    element.className += " " + classToAdd;
                }
            }
        }

        function removeClass(element, classToRemove) {
            var currentClassValue = element.className;

            if (currentClassValue == classToRemove) {
                element.className = "";
                return;
            }

            var classValues = currentClassValue.split(" ");
            var filteredList = [];

            for (var i = 0 ; i < classValues.length; i++) {
                if (classToRemove != classValues[i]) {
                    filteredList.push(classValues[i]);
                }
            }
            element.className = filteredList.join(" ");
        }
    |]    


    
    /------------------------------------------/
    /--------------  error pages  -------------/
    /------------------------------------------/

    page error_page(msg, ctx) [=
        [| <h2>Error: /]            
        msg;
        [| </h2> |]
        
        with (ctx) [=
            ctx;
        =]
    =]   

    error_page("Unspecified target.", ctx) unspecified_target_error(ctx) [/]

    error_page("Unknown target " + target_name, ctx) unknown_target_error(target_name, ctx) [/]

=]


