/**  bake.bento
 *
 *   Project automation and dependency management in Bento
 *
 *
 **/

site bake [=

    /------------------------------------------/
    /-------------- version info --------------/
    /------------------------------------------/

    bake_version = "0.1"


    /------------------------------------------/
    /-------------- base classes --------------/
    /------------------------------------------/

    /** base class for tasks **/
    
    dynamic task [=
        name = owner.type;
        keep: boolean succeeded(boolean flag) = flag
        
        console_print("Executing " + name);

        sub;
        
        if (!err) [=
            eval(succeeded(true));
        =] 
    =]

    /** base class for targets **/

    target [=
        name = owner.type
        keep: target[] depends_on = []
        keep: this task [?]
        
        /** true if this target has been executed in the current context **/
        keep: boolean executed(boolean did) = did
        
        /** true if this target has been successfully executed in the current context **/
        keep: boolean status(boolean ok) = ok
        
        /-- implementation: handle all the dependencies first, and if they all
         -- succeed then execute the task.
         --/

        dynamic boolean execute [=
            boolean everything_ok(boolean flag) = flag
    
            eval(everything_ok(: true :));
            
            console_print("Checking dependencies for target " + name);
    
            for target t in depends_on until !everything_ok [=
                if (!t.executed) [=
                    eval(everything_ok(: t.execute :));
                =] else [=
                    eval(everything_ok(: t.status :));
                =]
            =]
    
            if (everything_ok) [=
                console_print("Dependencies for target " + name  + " satisfied; executing task " + task.name);
                task;
                eval(executed(true));
                status(: task.succeeded :);
            =] else [=
                console_print("Unable to satisfy dependencies for target " + name);
                false;
            =]
        =]
    =]
    
    /------------------------------------------/
    /--------------   modules    --------------/
    /------------------------------------------/

    module [=
        name = owner.type
        path = "./" + name
        origin [?]
        file module_root = file(path)
    =]     
        

    /------------------------------------------/
    /--------------   console    --------------/
    /------------------------------------------/

    /** the current console input prompt **/
    
    prompt(p) = p
    
    static DEFAULT_PROMPT = "> "

    /** the current console buffer. When a target is executed, its output (both normal
     *  and error) is appended to this buffer.
     **/

    console_out(contents) = contents
    
    boolean console_changed(boolean changed) = changed
    
    dynamic console_print(str) [=
        if (str) [=
            new_out = console_out + str
            console_out(: new_out + '\r' :);
            log(">> " + str);
            eval(console_changed(: true :));
        =]
    =]
    
    dynamic console_clear [=
        if (console_out) [=
            console_out("");
            eval(console_changed(: true :));
        =]
    =]
    
    dynamic component console(request r) [=
        component_class = "console"
        
        dynamic display_contents [=
            log(console_changed ? "console has changed" : "console has not changed");
            eval(console_changed(: false :));
            [| <textarea wrap="off" id="console_textarea"> |]
            console_out;
            [| </textarea> |]
        =]

        with (r) [=
            log("console called with request");
            for until console_changed [=
                sleep(10000);
            =]
        =] else [=
            log("console called without request");
        =]
        
        display_contents;
    =]

    console_init_script [|
        // long poll
        pollComponent("bake_console", 5000, function() {
               var console_textarea = document.getElementById("console_textarea");
               if (console_textarea !== undefined) {
                    console_textarea.scrollTop = console_textarea.scrollHeight;
                }
            });
    |]
    
    /------------------------------------------/
    /--------------      UI      --------------/
    /------------------------------------------/
    
    /---- site variables ----/

    
    float left_panel_width(float ems) = ems

    color main_bgcolor = "#d7f1e7"

    session_init [=
        left_panel_width(22);
        console_print("bake version " + bake_version);
        console_print("$ ");
    =]


    /** base class of web page to display list of targets and instantiate selected targets. Bake
     *  projects should subclass this definition and add an implementation for top-level targets.
     **/

    page bakepage [=
        boolean ajax_enabled = true
        title = sitename
        
        style [| 
            html, body { 
                width: 100%;
                height: 100%;
                margin: 0 0 0 0;
                background: [= main_bgcolor; =];
            }
            div {
                background: [= main_bgcolor; =];
            }
            
            #main_container {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }

            .console textarea {
                margin: 0;
                width: 100%;
                height: 100%;
                color: #55ff33;
                background: #232323;
                border: 0.125em solid #77ff77;
                font-family: "Courier New", Courier, monospace;
                font-weight: bold;
                font-size: 0.875em;
                min-height: 10em;
                resize: none;
            }

            .vertical_bar {
                height: 100%;
                width: 0.25em;
                background: #dddddd;  
                border-width: 0 0.125em 0 0.125em;
                border-style: outset;
                border-color: white;  
            }
            
            .status_box {
                height: 1em;
                width: 1em;
                border-width: 0.125em;
                border-style: inset;
                border-color: white;  
                margin: 0.25em;
            }
            
            .status_default {
                background: [= main_bgcolor; =];
            }
            
            .status_completed {
                background: black;
            }
            
            .status_executing: {
                background: yellow;
            }
            
            .status_succeeded {
                background: green;
            }
            
            .status_failed {
                background: red;
            }

            #left_panel {
                position: absolute;
                padding: 1em;
                left: 0;
                top: 0;
                width: [= (left_panel_width - 2); =]em;
            }
            
            #size_bar {
                cursor: pointer;
                position: absolute;
                left: [= (left_panel_width + 2); =]em;
                top: 0;
                bottom: 0;
                z-index: 1001;
            }

            #right_panel {
                background: #dddddd;
                margin: 0;
                position: absolute;
                left: [= (left_panel_width + 2.5); =]em;
                top: 0;
                right: 0.5em;
                bottom: 0.5em;
            }
            
            #bake_console {
                width: 100%;
                height: 100%;
            }
        |]
        
        onload_script [=
            console_init_script;
            size_bar_init_script;
        =]
            
        size_bar_init_script [|
            size_bar_init();            
        |] 
        
        target_param = "target"
    
        /** top-level targets (ones available to the user) **/
        target[] user_targets = []
        
        target[] all_targets = [ for target t in user_targets [= t, for target d in t.depends_on [= d =] =] ] 
    
        /** target look up map **/
        target{} target_by_name = { for target t in all_targets [= t.name: t =] }

        dynamic console(*) bake_console(request r) [=
            id = "bake_console"
        =]

        component size_bar [=
            id = "size_bar"
            component_class = "vertical_bar"
        =]

        dynamic component target_panel(target t) [=
            component_class = "target_panel"
            id = t.name + "_panel"
        
            [| <table><tr><td> |]
            target_selector(t);
            [| </td><td> |]
            target_exec(t);
            [| </td></tr></table> |]
        =]

    
        dynamic component target_selector(target t) [=
            id = t.name + "_selector"
            target_name = t.name
            exec_id = t.name + "_exec" 
        
            request_button(target_name, target_name, exec_id, target_exec, target_param, target_name);
        =]

        dynamic component target_exec(target t),(params{}) [=
            style [|
                padding-right: 0.5em;
                padding-top: 1em;
                padding-left: 0.5em;
                background: [= main_bgcolor; =];
                color: #515151;
                min-height: 3em;
            |]
            
            name = "target_exec"
            
            target_name = params ? params{"target"} : t.name
            target this_target = t ? t : target_by_name{target_name}
            id = target_name + "_exec"
             
            with (params) [|
                Executing [= target_name; =]...
                <br/>
                [= if (this_target.execute) [|
                    Succeeded.
                |] else [|
                    FAILED.
                |] =]
                <br/>
            |] else [|
                Ready.
                <br/>
            |]
        =]

        /------- top-level wrapper around everything -------/
        [| <div id="main_container"> |]
        
        [| <div id="left_panel"> |]
        
        [| <h2> |]
        title;
        [| </h2> |]

        for target t in user_targets [=
            target_panel(t);
            [| <div style="padding-left: 1.5em;"> |]
            for target d in t.depends_on [=
                target_panel(d);
            =]
            [| </div> |] 
        =]
        [| </div> |]
        
        size_bar;
        
        [| <div id="right_panel"> |]
        bake_console;
        [| </div> |]

        [| </div> |]

        size_bar_script;
        util_script;        
    =]


    size_bar_script [|
        <script>
        var main_container;
        var size_bar;
        var left_panel;
        var right_panel;
        var last_x;
        function size_bar_init() {
            main_container = document.getElementById("main_container");
            size_bar = document.getElementById("size_bar");
            left_panel = document.getElementById("left_panel");
            right_panel = document.getElementById("right_panel");
            size_bar.addEventListener("mousedown", size_bar_select, false);
            window.addEventListener("mouseup", size_bar_release, false);
        }
        function size_bar_release() {
            window.removeEventListener("mousemove", size_bar_drag, true);
            size_bar.style.cursor = "pointer";
            return false;
        }
        function size_bar_select(e) {
            window.addEventListener("mousemove", size_bar_drag, true);
            size_bar.style.cursor = "move";
            last_x = e.clientX;
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
        function size_bar_drag(e) {
            var dx = e.clientX - last_x;
            last_x = e.clientX;
            var newLeft = (size_bar.offsetLeft + dx) + "px";
            var newRight = (size_bar.offsetLeft + size_bar.offsetWidth + dx) + "px";
            
            size_bar.style.left = newLeft;
            left_panel.style.width = newLeft;
            right_panel.style.left = newRight;
            e.preventDefault();
            e.stopPropagation();
            return false;
        }        
       
        </script>
    |]


    util_script [|    

        function addClass(element, classToAdd) {
            var currentClassValue = element.className;
            if (currentClassValue.indexOf(classToAdd) == -1) {
                if ((currentClassValue == null) || (currentClassValue === "")) {
                    element.className = classToAdd;
                } else {
                    element.className += " " + classToAdd;
                }
            }
        }

        function removeClass(element, classToRemove) {
            var currentClassValue = element.className;

            if (currentClassValue == classToRemove) {
                element.className = "";
                return;
            }

            var classValues = currentClassValue.split(" ");
            var filteredList = [];

            for (var i = 0 ; i < classValues.length; i++) {
                if (classToRemove != classValues[i]) {
                    filteredList.push(classValues[i]);
                }
            }
            element.className = filteredList.join(" ");
        }
    |]    
    

    
    /------------------------------------------/
    /--------------     tasks    --------------/
    /------------------------------------------/

    /** exec wrapper that sends output to console **/
    
    dynamic console_exec(cmd) [=
        dynamic exec_out = exec.out

        log("console_exec(" + cmd + ");");
        console_print(prompt + cmd);
        exec(cmd);
        
        for until !exec.is_running [=
            console_print(exec_out);
        =]
        console_print(exec_out);
    =] 
    
    
    /** a task that involves executing a system command **/ 
    task command_task [=
        command [?]
        commands[] = []
        
        if (command) [=
            console_exec(command);
        =] else [=
            for cmd in commands [=
                console_exec(cmd);
            =]
        =]
   
    =]

    task setup_module_task(module m) [=
        clone_command = "git clone " + m.origin

        console_print("Looking for directory " + m.module_root.name + "...");
        if (!m.module_root.exists) [=
            console_print("Cloning " + m.name + " repository...");
            console_exec(clone_command);
        =] else [=
            console_print("Directory exists, assuming repository exists too");
        =]
        
        sub;    
    =]

=]


