/**  bake.bento
 *
 *   Project automation and dependency management in Bento
 *
 *
 **/

site bake [=

    /------------------------------------------/
    /-------------- base classes --------------/
    /------------------------------------------/

    /** base class for tasks **/
    
    task [=
        name = owner.type;
        keep: boolean succeeded(boolean flag) = flag
        
        console_print("Executing " + name);

        sub;
        
        if (!err) [=
            eval(succeeded(true));
        =] 
    =]

    /** base class for targets **/

    target [=
        name = owner.type
        keep: target[] depends_on = []
        keep: this task [?]
        
        /** true if this target has been executed in the current context **/
        keep: boolean executed(boolean did) = did
        
        /** true if this target has been successfully executed in the current context **/
        keep: boolean status(boolean ok) = ok
        
        /-- implementation: handle all the dependencies first, and if they all
         -- succeed then execute the task.
         --/

        dynamic boolean execute [=
            boolean everything_ok(boolean flag) = flag
    
            eval(everything_ok(: true :));
    
            for target t in depends_on until !everything_ok [=
                if (!t.executed) [=
                    eval(everything_ok(: t.execute :));
                =] else [=
                    eval(everything_ok(: t.status :));
                =]
            =]
    
            if (everything_ok) [=
                task;
                eval(executed(true));
                status(: task.succeeded :);
            =] else [=
                false;
            =]
        =]
    =]
    
    /------------------------------------------/
    /--------------   modules    --------------/
    /------------------------------------------/

    module [=
        name = owner.type
        path = "./" + name
        origin [?]
        file module_root = file(path)
    =]     
        

    /------------------------------------------/
    /--------------   console    --------------/
    /------------------------------------------/

    /** the current console buffer. When a target is executed, its output (both normal
     *  and error) is appended to this buffer.
     **/

    console_out(str) = str
    
    dynamic console_print(str) [=
        eval(console_out(: console_out + str + br :));
        log("$>> " + str);
    =]


    /------------------------------------------/
    /--------------      UI      --------------/
    /------------------------------------------/

    /** base class of web page to display list of targets and instantiate selected targets. Bake
     *  projects should subclass this definition and add an implementation for top-level targets.
     **/

    page bakepage [=
        boolean ajax_enabled = true
        title = sitename
        
        target_param = "target"
    
        /** top-level targets (ones available to the user) **/
        target[] user_targets = []
    
        /** target look up map **/
        target{} target_by_name = { for target t in user_targets [= t.name: t =] }
    
        component target_selector(target t) [=
            target_name = t.name
        
            request_button(target_name, target_name, exec_target, target_param, target_name);
        
        =]

        dynamic component exec_target(params{}) [=
            id = "exec_target"
            target_name = params{"target"}
            this target = target_by_name{target_name}
            
            if (target_name) [=
                log("Executing " + target_name);
                if (target.execute) [=
                    log("Succeeded");
                =] else [=
                    log("FAILED");
                =]
            =]

            [| <tt> |]
            [= 
                for line in lines(console_out) [=
                    line;
                    br;
                =]
            =]
            [| </tt> |]
        =]
        
        [| <h2> |]
        title;
        [| </h2> |]
        
        for target t in user_targets [=
            target_selector(t);
        =]
        
        exec_target;
    
    =]

    
    /------------------------------------------/
    /--------------     tasks    --------------/
    /------------------------------------------/

    /** useful base classes for various categories of tasks **/
    
    /** a task that involves executing a system command **/ 
    task command_task [=
        command [?]
        commands[] = []
        
        if (command) [=
            exec(command);
        =] else [=
            for cmd in commands [=
                exec(cmd);
            =]
        =]
   
    =]

    task setup_module_task(module m) [=
    
        clone_command = "git clone " + m.origin
       
        if (!m.module_root.exists) [=
            console_print("Cloning " + m.name + " repository...");
            exec(clone_command);
        =]
        
        sub;    
    =]

=]


