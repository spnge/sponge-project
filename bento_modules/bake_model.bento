/**  bake_model.bento
 *
 *   Object model for bake project automation
 *
 **/

site bake [=


    /----------------------------------------------/
    /--------------   base classes    -------------/
    /----------------------------------------------/

    /** base class for tasks **/
    
    public dynamic task [=
        name = owner.type;
        keep: boolean succeeded(boolean flag) = flag
        
        console_print("Executing " + name);

        sub;
        
        if (!err) [=
            eval(succeeded(true));
        =] 
    =]

    /** base class for targets **/

    public target [=
        name = owner.type
        target[] depends_on = []
        task target_task [?]
        
        dynamic do_task = target_task(: :)
        
        /** true if this target has been executed in the current context **/
        keep: boolean executed(boolean did) = did
        
        /** true if this target has been successfully executed in the current context **/
        keep: boolean status(boolean ok) = ok
        
        /-- implementation: handle all the dependencies first, and if they all
         -- succeed then execute the task.
         --/

        target_name = name
        
        dynamic execute [=
            boolean everything_ok(boolean flag) = flag
    
            eval(everything_ok(: true :));
            
            console_print("Checking dependencies for target " + target_name);
    
            for target t in depends_on until !everything_ok [=
                if (!t.executed) [=
                    t.execute;
                =] else [=
                    console_print(t.name + " already executed.");
                =]
                eval(everything_ok(: t.status :));
            =]
    
            if (everything_ok) [=
                console_print("Dependencies for target " + target_name  + " satisfied");
                do_task;
                eval(executed(true));
                eval(status(: target_task.succeeded :));
                
                set_completion_status(target_name, DONE);
                set_success_status(target_name, target_task.succeeded ? SUCCEEDED : FAILED);
            =] else [=
                console_print("Unable to satisfy dependencies for target " + name);
                set_completion_status(target_name, BLOCKED);
            =]
        =]
    =]
    
    /** base class for target groups **/
    
    target_group [=
        name = owner.type
        group_name = name
        target[] targets = []
    =]
    
    /----------------------------------------------/
    /---------------     modules     --------------/
    /----------------------------------------------/

    public module [=
        name = owner.type
        path = "./" + name
        origin [?]
        file module_root = file(path)
    =]     

=]


